from telebot import TeleBot, types
from django.conf import settings
from .selenium_tools import check_elements_on_pages, search_text_on_page

bot = TeleBot(settings.TELEGRAM_BOT_TOKEN)


def is_admin(message):
    admin_id = getattr(settings, 'TELEGRAM_ADMIN_ID', None)
    if not admin_id:
        raise ValueError("TELEGRAM_ADMIN_ID not set in settings")
    return message.from_user.id == admin_id


def admin_required(func):
    def wrapped(message, *args, **kwargs):
        if not is_admin(message):
            bot.reply_to(message, "üîí –ë–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            return
        return func(message, *args, **kwargs)
    return wrapped


def create_main_keyboard():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üì∞ –ù–æ–≤–æ—Å—Ç–∏", "üí∞ –ü—Ä–µ–π—Å–∫—É—Ä–∞–Ω—Ç—ã")
    return keyboard


# –í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–ª–∂–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä
@bot.message_handler(commands=['start'])
@admin_required  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
def handle_start(message):
    bot.send_message(
        message.chat.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_main_keyboard()
    )


@bot.message_handler(func=lambda m: m.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
@admin_required
def handle_news(message):
    try:
        bot.send_chat_action(message.chat.id, 'typing')
        result = search_text_on_page("https://blog.belpost.by/", "—Ç–∞—Ä–∏—Ñ")
        bot.send_message(message.chat.id, result)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(func=lambda m: m.text == "üí∞ –ü—Ä–µ–π—Å–∫—É—Ä–∞–Ω—Ç—ã")
@admin_required
def handle_pricelist(message):
    try:
        bot.send_chat_action(message.chat.id, 'typing')
        url_xpath_map = {
            "https://belpost.by/Tarify2/TarifyRUPBelpochta/Tarifyfiz/fiz":
                "//a[span[text()='–ü—Ä–µ–π—Å–∫—É—Ä–∞–Ω—Ç –†–ë  —Å 01.03.2025 .pdf']]",
            "https://belpost.by/Tarify2/TarifyRUPBelpochta/Tarifyyur/Tarifynauslugipochtovoysv0":
                "//a[span[text()='–ü—Ä–µ–π—Å–∫—É—Ä–∞–Ω—Ç –†–ë  —Å 01.03.2025 .pdf']]",
            "https://belpost.by/Tarify2/TarifyRUPBelpochta/Tarifyfiz/vnutrennyayauskorennayapo0":
                "//a[span[text()='–ü—Ä–µ–π—Å–∫—É—Ä–∞–Ω—Ç —ç–∫—Å–ø—Ä–µ—Å—Å –ø–æ—Å—ã–ª–∫–∏ —Å 01.03.2025 .pdf']]",
            "https://www.belpost.by/Tarify2/TarifyRUPBelpochta/Tarifyyur/vnutrennyayauskorennayapo1":
                "//a[span[text()='–ü—Ä–µ–π—Å–∫—É—Ä–∞–Ω—Ç —ç–∫—Å–ø—Ä–µ—Å—Å –ø–æ—Å—ã–ª–∫–∏  —Å 01.03.2025 .pdf']]",
            "https://belpost.by/Tarify2/TarifyRUPBelpochta/Tarifyfiz/mezhdunarodnyyepochtovyye1":
                "//a[span[text()='–ü–†–ï–ô–°–ö–£–†–ê–ù–¢ –ú–ï–ñ–î —Ñ–∏–∑ –ª–∏—Ü–∞ —Å 01.01.2025.pdf']]",
            "https://belpost.by/Tarify2/TarifyRUPBelpochta/Tarifyyur/mezhdunarodnyyepochtovyye0":
                "//a[span[text()='–ü–†–ï–ô–°–ö–£–†–ê–ù–¢ –ú–ï–ñ–î —é—Ä –ª–∏—Ü–∞ —Å 01.01.2025.pdf']]",
            "https://belpost.by/Tarify2/TarifyRUPBelpochta/Tarifyfiz/Mezhdunarodnyyeposylkidly":
                "//a[span[text()='–ü–†–ï–ô–°–ö–£–†–ê–ù–¢ –ú–ï–ñ–î  –ø–æ—Å—ã–ª–∫–∏ —Ñ–∏–∑ –ª–∏—Ü–∞ —Å 01.01.2025).pdf']]",
            "https://belpost.by/Tarify2/TarifyRUPBelpochta/Tarifyyur/Mezhdunarodnyyeposylkidly0":
                "//a[span[text()='2 –ü–†–ï–ô–°–ö–£–†–ê–ù–¢ –ú–ï–ñ–î  –ø–æ—Å—ã–ª–∫–∏ —Å 01.01.2025.pdf']]",
            "https://belpost.by/Tarify2/TarifyRUPBelpochta/Tarifyfiz/Mezhdunarodnayauskorennay":
                "//a[span[text()='–ü–†–ï–ô–°–ö–£–†–ê–ù–¢ –ú–ï–ñ–î EMS  –§–ò–ó –õ–ò–¶–ê —Å 01.01.2025).pdf']]",
            "https://belpost.by/Tarify2/TarifyRUPBelpochta/Tarifyyur/Mezhdunarodnayauskorennay0":
                "//a[span[text()='–ü–†–ï–ô–°–ö–£–†–ê–ù–¢ –ú–ï–ñ–î EMS  —é—Ä –ª–∏—Ü–∞ —Å 01.01.2025).pdf']]",
        }
        result = check_elements_on_pages(url_xpath_map)
        bot.send_message(message.chat.id, result)
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {str(e)}")


@bot.callback_query_handler(func=lambda call: True)
@admin_required
def handle_callback(call):
    if is_admin(call.message):
        bot.answer_callback_query(call.id, "–û–±—Ä–∞–±–æ—Ç–∫–∞...")
    else:
        bot.answer_callback_query(call.id, "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!", show_alert=True)
